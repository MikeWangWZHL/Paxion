
## == internvideo backbone == ## 
model:
  arch: patch_and_fuse_internvideo_baseline_simple
  model_type: InternVideo-MM-L-14
  load_pretrained: True
  backbone_pretrained: "pretrained_ckpt/InternVideo/InternVideo-MM-L-14.ckpt"

## == ClipVip backbone == ## 
## NOTE: uncomment following "model" section to use the clipvip backbone; modify the output_dir accordingly under "run:" section
# model:
#   arch: patch_and_fuse_clipvip_baseline_simple # w/o jointly train vis encoder using action prediction
#   model_type: pretrain_vip_base_32
#   load_pretrained: True
#   backbone_config_json: "ClipViP/src/configs/pretrained/pretrain_vip_base_32.json"


## == Singularity backbone == ## 
## NOTE: uncomment following "model" section to use the singularity backbone; modify the output_dir accordingly under "run:" section 
# model:
#   arch: patch_and_fuse_singularity_baseline_simple # w/o jointly train vis encoder using action prediction
#   model_type: singularity_temporal_17m
#   load_pretrained: True
#   backbone_config_yaml: "Singularity/configs/pretrained_singularity_temporal_17m.yaml"


datasets:
  actionbench_ssv2_224x224_5fps:
    type: "action_antonyms_and_object_shuffled"
    vis_processor:
      train:
        name: "video_train"
        image_size: 224
      eval:
        name: "internvideo_eval"
        image_size: 224
    text_processor:
      train:
        name: "minimum_text"
      eval:
        name: "minimum_text"
    
    # IMPORTANT configs: 
    fps: 5 # if downsampled, use 5 fps
    task: "action_antonym"
    neg_sampling_same_clip: 0
    # eval_only: True
    
    # other arguements
    train_k: null # sample a subset of k instances
    eval_k: null # sample a subset of k instances, reduce evaluation time
    frm_sampling_strategy: "uniform" # take the first and last frame as start and end state
    num_frm: 8
    train_frame_height: 224
    train_frame_width: 224
    eval_frame_height: 224
    eval_frame_width: 224

run:
  # use custom runner
  runner: runner_base_patch_and_fuse
  
  # task object name
  task: actionbench

  # which module is used for inference ["backbone", "knowledge_patcher", "knowledge_patcher_baseline"]
  eval_module: knowledge_patcher_baseline
  eval_task: action_antonym

  # optimizer
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 1e-5
  min_lr: 0
  weight_decay: 0.05
  max_epoch: 1

  batch_size_train: 8
  batch_size_eval: 4
  
  num_workers: 4

  seed: 42
  output_dir: "output/actionbench/train/SSv2__KP-Transformer-VTC__internvideo"

  amp: False
  resume_ckpt_path: null

  evaluate: False
  
  train_splits: ["train"]
  valid_splits: ["val"]
  # test_splits: ["test"]

  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True
